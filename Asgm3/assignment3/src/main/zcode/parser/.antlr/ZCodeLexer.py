# Generated from d://_ACADEMIC//HCMUT//Term232//PPL//Assignment//Asgm3//assignment3//assignment3-initial//src//main//zcode//parser//ZCode.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,49,386,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,1,0,1,0,1,0,1,0,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,
        1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,
        1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,
        1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,
        1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,
        1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,30,
        1,30,1,30,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,35,
        1,35,1,36,1,36,1,36,1,36,1,36,1,37,1,37,3,37,254,8,37,1,38,1,38,
        1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,
        1,40,1,40,1,40,1,41,1,41,3,41,276,8,41,1,41,3,41,279,8,41,1,42,4,
        42,282,8,42,11,42,12,42,283,1,43,1,43,5,43,288,8,43,10,43,12,43,
        291,9,43,1,44,1,44,3,44,295,8,44,1,44,4,44,298,8,44,11,44,12,44,
        299,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,5,46,311,8,46,10,
        46,12,46,314,9,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,3,47,323,8,
        47,1,48,1,48,1,48,1,49,1,49,5,49,330,8,49,10,49,12,49,333,9,49,1,
        50,1,50,1,51,1,51,1,51,1,51,5,51,341,8,51,10,51,12,51,344,9,51,1,
        51,1,51,1,52,4,52,349,8,52,11,52,12,52,350,1,52,1,52,1,53,1,53,5,
        53,357,8,53,10,53,12,53,360,9,53,1,53,1,53,1,53,3,53,365,8,53,1,
        53,1,53,1,54,1,54,5,54,371,8,54,10,54,12,54,374,9,54,1,54,1,54,1,
        54,1,55,1,55,1,55,3,55,382,8,55,1,56,1,56,1,56,0,0,57,1,1,3,2,5,
        3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
        53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,
        75,38,77,0,79,0,81,39,83,40,85,0,87,0,89,0,91,41,93,42,95,0,97,0,
        99,43,101,44,103,45,105,46,107,47,109,48,111,0,113,49,1,0,16,1,0,
        48,57,1,0,46,46,2,0,69,69,101,101,2,0,43,43,45,45,1,0,34,34,4,0,
        10,10,13,13,34,34,92,92,1,0,39,39,1,0,92,92,7,0,39,39,92,92,98,98,
        102,102,110,110,114,114,116,116,3,0,65,90,95,95,97,122,4,0,48,57,
        65,90,95,95,97,122,1,0,10,10,2,0,10,10,13,13,3,0,8,9,12,13,32,32,
        1,1,10,10,1,0,13,13,394,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
        1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
        1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
        1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,81,
        1,0,0,0,0,83,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,99,1,0,0,0,0,101,
        1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,
        0,113,1,0,0,0,1,115,1,0,0,0,3,119,1,0,0,0,5,127,1,0,0,0,7,130,1,
        0,0,0,9,135,1,0,0,0,11,141,1,0,0,0,13,145,1,0,0,0,15,152,1,0,0,0,
        17,156,1,0,0,0,19,162,1,0,0,0,21,165,1,0,0,0,23,171,1,0,0,0,25,180,
        1,0,0,0,27,183,1,0,0,0,29,188,1,0,0,0,31,193,1,0,0,0,33,195,1,0,
        0,0,35,197,1,0,0,0,37,199,1,0,0,0,39,201,1,0,0,0,41,203,1,0,0,0,
        43,207,1,0,0,0,45,211,1,0,0,0,47,214,1,0,0,0,49,216,1,0,0,0,51,218,
        1,0,0,0,53,220,1,0,0,0,55,222,1,0,0,0,57,224,1,0,0,0,59,228,1,0,
        0,0,61,231,1,0,0,0,63,234,1,0,0,0,65,236,1,0,0,0,67,239,1,0,0,0,
        69,242,1,0,0,0,71,244,1,0,0,0,73,246,1,0,0,0,75,253,1,0,0,0,77,255,
        1,0,0,0,79,260,1,0,0,0,81,266,1,0,0,0,83,273,1,0,0,0,85,281,1,0,
        0,0,87,285,1,0,0,0,89,292,1,0,0,0,91,301,1,0,0,0,93,308,1,0,0,0,
        95,322,1,0,0,0,97,324,1,0,0,0,99,327,1,0,0,0,101,334,1,0,0,0,103,
        336,1,0,0,0,105,348,1,0,0,0,107,354,1,0,0,0,109,368,1,0,0,0,111,
        381,1,0,0,0,113,383,1,0,0,0,115,116,5,118,0,0,116,117,5,97,0,0,117,
        118,5,114,0,0,118,2,1,0,0,0,119,120,5,100,0,0,120,121,5,121,0,0,
        121,122,5,110,0,0,122,123,5,97,0,0,123,124,5,109,0,0,124,125,5,105,
        0,0,125,126,5,99,0,0,126,4,1,0,0,0,127,128,5,60,0,0,128,129,5,45,
        0,0,129,6,1,0,0,0,130,131,5,102,0,0,131,132,5,117,0,0,132,133,5,
        110,0,0,133,134,5,99,0,0,134,8,1,0,0,0,135,136,5,98,0,0,136,137,
        5,101,0,0,137,138,5,103,0,0,138,139,5,105,0,0,139,140,5,110,0,0,
        140,10,1,0,0,0,141,142,5,101,0,0,142,143,5,110,0,0,143,144,5,100,
        0,0,144,12,1,0,0,0,145,146,5,114,0,0,146,147,5,101,0,0,147,148,5,
        116,0,0,148,149,5,117,0,0,149,150,5,114,0,0,150,151,5,110,0,0,151,
        14,1,0,0,0,152,153,5,102,0,0,153,154,5,111,0,0,154,155,5,114,0,0,
        155,16,1,0,0,0,156,157,5,117,0,0,157,158,5,110,0,0,158,159,5,116,
        0,0,159,160,5,105,0,0,160,161,5,108,0,0,161,18,1,0,0,0,162,163,5,
        98,0,0,163,164,5,121,0,0,164,20,1,0,0,0,165,166,5,98,0,0,166,167,
        5,114,0,0,167,168,5,101,0,0,168,169,5,97,0,0,169,170,5,107,0,0,170,
        22,1,0,0,0,171,172,5,99,0,0,172,173,5,111,0,0,173,174,5,110,0,0,
        174,175,5,116,0,0,175,176,5,105,0,0,176,177,5,110,0,0,177,178,5,
        117,0,0,178,179,5,101,0,0,179,24,1,0,0,0,180,181,5,105,0,0,181,182,
        5,102,0,0,182,26,1,0,0,0,183,184,5,101,0,0,184,185,5,108,0,0,185,
        186,5,105,0,0,186,187,5,102,0,0,187,28,1,0,0,0,188,189,5,101,0,0,
        189,190,5,108,0,0,190,191,5,115,0,0,191,192,5,101,0,0,192,30,1,0,
        0,0,193,194,5,40,0,0,194,32,1,0,0,0,195,196,5,41,0,0,196,34,1,0,
        0,0,197,198,5,91,0,0,198,36,1,0,0,0,199,200,5,93,0,0,200,38,1,0,
        0,0,201,202,5,44,0,0,202,40,1,0,0,0,203,204,5,110,0,0,204,205,5,
        111,0,0,205,206,5,116,0,0,206,42,1,0,0,0,207,208,5,97,0,0,208,209,
        5,110,0,0,209,210,5,100,0,0,210,44,1,0,0,0,211,212,5,111,0,0,212,
        213,5,114,0,0,213,46,1,0,0,0,214,215,5,43,0,0,215,48,1,0,0,0,216,
        217,5,45,0,0,217,50,1,0,0,0,218,219,5,42,0,0,219,52,1,0,0,0,220,
        221,5,47,0,0,221,54,1,0,0,0,222,223,5,37,0,0,223,56,1,0,0,0,224,
        225,5,46,0,0,225,226,5,46,0,0,226,227,5,46,0,0,227,58,1,0,0,0,228,
        229,5,61,0,0,229,230,5,61,0,0,230,60,1,0,0,0,231,232,5,33,0,0,232,
        233,5,61,0,0,233,62,1,0,0,0,234,235,5,61,0,0,235,64,1,0,0,0,236,
        237,5,60,0,0,237,238,5,61,0,0,238,66,1,0,0,0,239,240,5,62,0,0,240,
        241,5,61,0,0,241,68,1,0,0,0,242,243,5,60,0,0,243,70,1,0,0,0,244,
        245,5,62,0,0,245,72,1,0,0,0,246,247,5,98,0,0,247,248,5,111,0,0,248,
        249,5,111,0,0,249,250,5,108,0,0,250,74,1,0,0,0,251,254,3,77,38,0,
        252,254,3,79,39,0,253,251,1,0,0,0,253,252,1,0,0,0,254,76,1,0,0,0,
        255,256,5,116,0,0,256,257,5,114,0,0,257,258,5,117,0,0,258,259,5,
        101,0,0,259,78,1,0,0,0,260,261,5,102,0,0,261,262,5,97,0,0,262,263,
        5,108,0,0,263,264,5,115,0,0,264,265,5,101,0,0,265,80,1,0,0,0,266,
        267,5,110,0,0,267,268,5,117,0,0,268,269,5,109,0,0,269,270,5,98,0,
        0,270,271,5,101,0,0,271,272,5,114,0,0,272,82,1,0,0,0,273,275,3,85,
        42,0,274,276,3,87,43,0,275,274,1,0,0,0,275,276,1,0,0,0,276,278,1,
        0,0,0,277,279,3,89,44,0,278,277,1,0,0,0,278,279,1,0,0,0,279,84,1,
        0,0,0,280,282,7,0,0,0,281,280,1,0,0,0,282,283,1,0,0,0,283,281,1,
        0,0,0,283,284,1,0,0,0,284,86,1,0,0,0,285,289,7,1,0,0,286,288,7,0,
        0,0,287,286,1,0,0,0,288,291,1,0,0,0,289,287,1,0,0,0,289,290,1,0,
        0,0,290,88,1,0,0,0,291,289,1,0,0,0,292,294,7,2,0,0,293,295,7,3,0,
        0,294,293,1,0,0,0,294,295,1,0,0,0,295,297,1,0,0,0,296,298,7,0,0,
        0,297,296,1,0,0,0,298,299,1,0,0,0,299,297,1,0,0,0,299,300,1,0,0,
        0,300,90,1,0,0,0,301,302,5,115,0,0,302,303,5,116,0,0,303,304,5,114,
        0,0,304,305,5,105,0,0,305,306,5,110,0,0,306,307,5,103,0,0,307,92,
        1,0,0,0,308,312,7,4,0,0,309,311,3,95,47,0,310,309,1,0,0,0,311,314,
        1,0,0,0,312,310,1,0,0,0,312,313,1,0,0,0,313,315,1,0,0,0,314,312,
        1,0,0,0,315,316,7,4,0,0,316,317,6,46,0,0,317,94,1,0,0,0,318,323,
        8,5,0,0,319,323,3,97,48,0,320,321,7,6,0,0,321,323,7,4,0,0,322,318,
        1,0,0,0,322,319,1,0,0,0,322,320,1,0,0,0,323,96,1,0,0,0,324,325,7,
        7,0,0,325,326,7,8,0,0,326,98,1,0,0,0,327,331,7,9,0,0,328,330,7,10,
        0,0,329,328,1,0,0,0,330,333,1,0,0,0,331,329,1,0,0,0,331,332,1,0,
        0,0,332,100,1,0,0,0,333,331,1,0,0,0,334,335,7,11,0,0,335,102,1,0,
        0,0,336,337,5,35,0,0,337,338,5,35,0,0,338,342,1,0,0,0,339,341,8,
        12,0,0,340,339,1,0,0,0,341,344,1,0,0,0,342,340,1,0,0,0,342,343,1,
        0,0,0,343,345,1,0,0,0,344,342,1,0,0,0,345,346,6,51,1,0,346,104,1,
        0,0,0,347,349,7,13,0,0,348,347,1,0,0,0,349,350,1,0,0,0,350,348,1,
        0,0,0,350,351,1,0,0,0,351,352,1,0,0,0,352,353,6,52,1,0,353,106,1,
        0,0,0,354,358,5,34,0,0,355,357,3,95,47,0,356,355,1,0,0,0,357,360,
        1,0,0,0,358,356,1,0,0,0,358,359,1,0,0,0,359,364,1,0,0,0,360,358,
        1,0,0,0,361,362,5,13,0,0,362,365,5,10,0,0,363,365,7,14,0,0,364,361,
        1,0,0,0,364,363,1,0,0,0,365,366,1,0,0,0,366,367,6,53,2,0,367,108,
        1,0,0,0,368,372,5,34,0,0,369,371,3,95,47,0,370,369,1,0,0,0,371,374,
        1,0,0,0,372,370,1,0,0,0,372,373,1,0,0,0,373,375,1,0,0,0,374,372,
        1,0,0,0,375,376,3,111,55,0,376,377,6,54,3,0,377,110,1,0,0,0,378,
        382,7,15,0,0,379,380,7,7,0,0,380,382,8,8,0,0,381,378,1,0,0,0,381,
        379,1,0,0,0,382,112,1,0,0,0,383,384,9,0,0,0,384,385,6,56,4,0,385,
        114,1,0,0,0,17,0,253,275,278,283,289,294,299,312,322,331,342,350,
        358,364,372,381,5,1,46,0,6,0,0,1,53,1,1,54,2,1,56,3
    ]

class ZCodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    VAR = 1
    DYNAMIC = 2
    ASSIGN_OPS = 3
    FUNC = 4
    BEGIN = 5
    END = 6
    RETURN = 7
    FOR = 8
    UNTIL = 9
    BY = 10
    BREAK = 11
    CONTINUE = 12
    IF = 13
    ELIF = 14
    ELSE = 15
    LB = 16
    RB = 17
    LSB = 18
    RSB = 19
    COMMA = 20
    NOT = 21
    AND = 22
    OR = 23
    ADD_OPS = 24
    SUB_OPS = 25
    MUL_OPS = 26
    DIV_OPS = 27
    MOD_OPS = 28
    CONCAT_OPS = 29
    EQS = 30
    NEQ = 31
    EQ = 32
    LEQ = 33
    GEQ = 34
    LT = 35
    GT = 36
    BOOL_TYP = 37
    BOOL_LIT = 38
    NUM_TYP = 39
    NUM_LIT = 40
    STR_TYP = 41
    STRING_LIT = 42
    IDENTIFIER = 43
    NEWLINE = 44
    COMMENT = 45
    WS = 46
    UNCLOSE_STRING = 47
    ILLEGAL_ESCAPE = 48
    ERROR_CHAR = 49

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'var'", "'dynamic'", "'<-'", "'func'", "'begin'", "'end'", 
            "'return'", "'for'", "'until'", "'by'", "'break'", "'continue'", 
            "'if'", "'elif'", "'else'", "'('", "')'", "'['", "']'", "','", 
            "'not'", "'and'", "'or'", "'+'", "'-'", "'*'", "'/'", "'%'", 
            "'...'", "'=='", "'!='", "'='", "'<='", "'>='", "'<'", "'>'", 
            "'bool'", "'number'", "'string'" ]

    symbolicNames = [ "<INVALID>",
            "VAR", "DYNAMIC", "ASSIGN_OPS", "FUNC", "BEGIN", "END", "RETURN", 
            "FOR", "UNTIL", "BY", "BREAK", "CONTINUE", "IF", "ELIF", "ELSE", 
            "LB", "RB", "LSB", "RSB", "COMMA", "NOT", "AND", "OR", "ADD_OPS", 
            "SUB_OPS", "MUL_OPS", "DIV_OPS", "MOD_OPS", "CONCAT_OPS", "EQS", 
            "NEQ", "EQ", "LEQ", "GEQ", "LT", "GT", "BOOL_TYP", "BOOL_LIT", 
            "NUM_TYP", "NUM_LIT", "STR_TYP", "STRING_LIT", "IDENTIFIER", 
            "NEWLINE", "COMMENT", "WS", "UNCLOSE_STRING", "ILLEGAL_ESCAPE", 
            "ERROR_CHAR" ]

    ruleNames = [ "VAR", "DYNAMIC", "ASSIGN_OPS", "FUNC", "BEGIN", "END", 
                  "RETURN", "FOR", "UNTIL", "BY", "BREAK", "CONTINUE", "IF", 
                  "ELIF", "ELSE", "LB", "RB", "LSB", "RSB", "COMMA", "NOT", 
                  "AND", "OR", "ADD_OPS", "SUB_OPS", "MUL_OPS", "DIV_OPS", 
                  "MOD_OPS", "CONCAT_OPS", "EQS", "NEQ", "EQ", "LEQ", "GEQ", 
                  "LT", "GT", "BOOL_TYP", "BOOL_LIT", "ZTrue", "ZFalse", 
                  "NUM_TYP", "NUM_LIT", "Int", "Dec", "Exp", "STR_TYP", 
                  "STRING_LIT", "Str_Char", "Esc_Seq", "IDENTIFIER", "NEWLINE", 
                  "COMMENT", "WS", "UNCLOSE_STRING", "ILLEGAL_ESCAPE", "Illegal_Char", 
                  "ERROR_CHAR" ]

    grammarFileName = "ZCode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[46] = self.STRING_LIT_action 
            actions[53] = self.UNCLOSE_STRING_action 
            actions[54] = self.ILLEGAL_ESCAPE_action 
            actions[56] = self.ERROR_CHAR_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def STRING_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.text = self.text[1:-1]
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:

            	if(len(self.text) > 2 and self.text[-1] == '\n' and self.text[-2] == '\r'):
            		raise UncloseString(self.text[1:-2])
            	elif (self.text[-1] == '\n'):
            		raise UncloseString(self.text[1:-1])
            	else:
            		raise UncloseString(self.text[1:])

     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
            raise IllegalEscape(self.text[1:])
     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            raise ErrorToken(self.text)
     


